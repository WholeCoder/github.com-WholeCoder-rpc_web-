// Code generated by protoc-gen-go. DO NOT EDIT.
// source: computer.proto

package cmd

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Computer struct {
	Body                 string   `protobuf:"bytes,1,opt,name=Body,proto3" json:"Body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Computer) Reset()         { *m = Computer{} }
func (m *Computer) String() string { return proto.CompactTextString(m) }
func (*Computer) ProtoMessage()    {}
func (*Computer) Descriptor() ([]byte, []int) {
	return fileDescriptor_13db0063221f88fa, []int{0}
}

func (m *Computer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Computer.Unmarshal(m, b)
}
func (m *Computer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Computer.Marshal(b, m, deterministic)
}
func (m *Computer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Computer.Merge(m, src)
}
func (m *Computer) XXX_Size() int {
	return xxx_messageInfo_Computer.Size(m)
}
func (m *Computer) XXX_DiscardUnknown() {
	xxx_messageInfo_Computer.DiscardUnknown(m)
}

var xxx_messageInfo_Computer proto.InternalMessageInfo

func (m *Computer) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func init() {
	proto.RegisterType((*Computer)(nil), "main.Computer")
}

func init() {
	proto.RegisterFile("computer.proto", fileDescriptor_13db0063221f88fa)
}

var fileDescriptor_13db0063221f88fa = []byte{
	// 122 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0xce, 0xcf, 0x2d,
	0x28, 0x2d, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xc9, 0x4d, 0xcc, 0xcc,
	0x53, 0x92, 0xe3, 0xe2, 0x70, 0x86, 0x8a, 0x0b, 0x09, 0x71, 0xb1, 0x38, 0xe5, 0xa7, 0x54, 0x4a,
	0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x46, 0xf6, 0x5c, 0xfc, 0x30, 0xf9, 0xe0, 0xd4,
	0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21, 0x1d, 0x2e, 0x8e, 0xe0, 0xc4, 0x4a, 0x8f, 0xd4, 0x9c, 0x9c,
	0x7c, 0x21, 0x3e, 0x3d, 0x90, 0x29, 0x7a, 0x30, 0x25, 0x52, 0x68, 0x7c, 0x25, 0x06, 0x27, 0xf6,
	0x28, 0x56, 0x3d, 0xeb, 0xe4, 0xdc, 0x94, 0x24, 0x36, 0xb0, 0xb5, 0xc6, 0x80, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xb9, 0x2f, 0xc5, 0xac, 0x88, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ComputerServiceClient is the client API for ComputerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ComputerServiceClient interface {
	SayHello(ctx context.Context, in *Computer, opts ...grpc.CallOption) (*Computer, error)
}

type computerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComputerServiceClient(cc grpc.ClientConnInterface) ComputerServiceClient {
	return &computerServiceClient{cc}
}

func (c *computerServiceClient) SayHello(ctx context.Context, in *Computer, opts ...grpc.CallOption) (*Computer, error) {
	out := new(Computer)
	err := c.cc.Invoke(ctx, "/main.ComputerService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComputerServiceServer is the server API for ComputerService service.
type ComputerServiceServer interface {
	SayHello(context.Context, *Computer) (*Computer, error)
}

// UnimplementedComputerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedComputerServiceServer struct {
}

func (*UnimplementedComputerServiceServer) SayHello(ctx context.Context, req *Computer) (*Computer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}

func RegisterComputerServiceServer(s *grpc.Server, srv ComputerServiceServer) {
	s.RegisterService(&_ComputerService_serviceDesc, srv)
}

func _ComputerService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Computer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputerServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ComputerService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputerServiceServer).SayHello(ctx, req.(*Computer))
	}
	return interceptor(ctx, in, info, handler)
}

var _ComputerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.ComputerService",
	HandlerType: (*ComputerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _ComputerService_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "computer.proto",
}
